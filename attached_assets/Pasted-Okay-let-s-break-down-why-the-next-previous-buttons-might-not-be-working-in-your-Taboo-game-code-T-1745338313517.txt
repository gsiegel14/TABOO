Okay, let's break down why the next/previous buttons might not be working in your Taboo game code. The code for attaching the event listeners and the logic within them looks generally correct, so the issue likely lies in one of these areas:
HTML Element IDs Don't Match:
Problem: The JavaScript code uses document.getElementById('prev-card') and document.getElementById('next-card'). If your HTML file has different id attributes for these buttons (e.g., id="previous-card", id="next_card", or no ID at all), the prevCardBtn and nextCardBtn variables will be null. Trying to add an event listener to null will cause an error (check your browser's developer console!) and the listeners won't be attached.
Solution: Double-check your HTML file. Ensure you have elements like <button id="prev-card">Previous</button> and <button id="next-card">Next</button>. The id attributes must match exactly.
JavaScript File Load Order:
Problem: The script relies on the tabooCards array, which you mention should be loaded from card-data.js. If taboo.js (this script) is loaded before card-data.js in your HTML, tabooCards will be undefined when initGame runs. While you have a check and a fallback, if the initial access fails critically, it might prevent subsequent code (like event listener setup) from running correctly, or the button logic might fail because tabooCards.length is initially incorrect.
Solution: In your HTML file, make sure the <script> tag for card-data.js comes before the <script> tag for taboo.js:
<!-- Other head elements -->
<script src="card-data.js"></script>
<script src="taboo.js" defer></script> <!-- defer is good practice -->
<!-- Other body elements -->
Use code with caution.
Html
tabooCards Array is Empty or Invalid:
Problem: Even if card-data.js loads, if it fails to define tabooCards correctly, or if tabooCards is an empty array ([]), the logic might behave unexpectedly, although your displayCard function has checks. An empty array would mean tabooCards.length is 0. When clicking "Next" (0 + 1), newIndex becomes 1. if (newIndex >= tabooCards.length) (1 >= 0) becomes true, setting newIndex back to 0. Clicking "Previous" (0 - 1), newIndex becomes -1. if (newIndex < 0) becomes true, setting newIndex to tabooCards.length - 1 (which is -1). This could lead to errors or infinite loops trying to display index -1 or 0. Your fallback does create one card, so this is less likely unless the fallback itself fails.
Solution: Use your browser's developer console. After the page loads, type tabooCards and press Enter. Verify that it's an array with card objects inside. Check for any errors during the loading of card-data.js.
Errors Elsewhere Preventing Execution:
Problem: An error before the setupEventListeners() function is called, or inside the displayCard function the first time it's called, could prevent the event listeners from being attached or stop the script execution. For example, an error in initAudio() or initFancybox() could halt the script. Similarly, if the very first call to displayCard(0) throws an error (e.g., accessing a property of an undefined card), the rest of the setup might not complete.
Solution: Check the browser's developer console (usually F12) for any errors listed. Fix errors starting from the top one reported.
Event Propagation Issues (Less Likely Here):
Problem: You are using e.stopPropagation(). This is usually done correctly here to prevent the click on the button from also triggering the tabooCardElement's flip listener (assuming the buttons are inside the card element). However, if there's some other complex event handling structure or overlay, it could interfere, but it's unlikely given this code.
Solution: Temporarily comment out e.stopPropagation() in the button handlers to see if it makes a difference (though it likely won't be the root cause and is probably needed).
Debugging Steps:
Open Developer Console: Press F12 in your browser. Look at the "Console" tab for any red error messages when the page loads or when you click the buttons. This is the most important step.
Verify HTML IDs: Inspect the button elements in the "Elements" tab (or view page source) and confirm their id attributes are prev-card and next-card.
Verify Script Order: Check the <script> tags in your HTML.
Check tabooCards: Type tabooCards in the console after the page loads to see its value.
Add console.log:
Inside setupEventListeners, right before adding the listeners, add:
console.log('Attaching listeners. prevCardBtn:', prevCardBtn, 'nextCardBtn:', nextCardBtn);
Use code with caution.
JavaScript
(If either button variable shows null, the getElementById failed).
At the very beginning of the click handler functions for the buttons, add:
console.log('PREV button clicked!');
Use code with caution.
JavaScript
and
console.log('NEXT button clicked!');
Use code with caution.
JavaScript
(If these messages don't appear when you click, the listener wasn't attached correctly or something is blocking the click).
By following these steps, you should be able to pinpoint why the listeners aren't firing or why the logic isn't working as expected. The console errors are usually the biggest clue.